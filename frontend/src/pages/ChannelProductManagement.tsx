import React, { useState, useEffect } from 'react';
import {
  Container, Paper, Typography, Box, Table, TableBody, TableCell, TableContainer,
  TableHead, TableRow, Chip, Button, TextField, MenuItem, Alert, CircularProgress,
  Dialog, DialogTitle, DialogContent, DialogActions, Grid, IconButton, Tabs, Tab,
} from '@mui/material';
import {
  Add as AddIcon, Store as StoreIcon, Delete as DeleteIcon,
} from '@mui/icons-material';
import api from '../services/api';
import { Channel, ChannelProduct, ChannelProductStatus, Product } from '../types';
import { productApi, bunjangApi } from '../services/api';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

const TabPanel: React.FC<TabPanelProps> = ({ children, value, index }) => {
  return (
    <div hidden={value !== index}>
      {value === index && <Box sx={{ pt: 3 }}>{children}</Box>}
    </div>
  );
};

const ChannelProductManagement: React.FC = () => {
  const [currentTab, setCurrentTab] = useState(0);
  const [channelProducts, setChannelProducts] = useState<ChannelProduct[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [openDialog, setOpenDialog] = useState(false);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedProduct, setSelectedProduct] = useState<number | null>(null);
  const [allocatedQuantity, setAllocatedQuantity] = useState(0);
  const [channelPrice, setChannelPrice] = useState(0);
  const [selectedChannel, setSelectedChannel] = useState<Channel>(Channel.CARROT_MARKET);

  const channels = [
    { value: Channel.CARROT_MARKET, label: 'ü•ï ÎãπÍ∑ºÎßàÏºì', supportsApi: false },
    { value: Channel.BUNGAE_MARKET, label: '‚ö° Î≤àÍ∞úÏû•ÌÑ∞', supportsApi: false },
    { value: Channel.JOONGGONARA, label: 'üì± Ï§ëÍ≥†ÎÇòÎùº', supportsApi: false },
    { value: Channel.CAFE24, label: 'üõí Ïπ¥Ìéò24', supportsApi: true },
    { value: Channel.NAVER_STORE, label: 'üü¢ ÎÑ§Ïù¥Î≤Ñ', supportsApi: true },
    { value: Channel.COUPANG, label: 'üîµ Ïø†Ìå°', supportsApi: true },
    { value: Channel.AUCTION, label: 'üü° Ïò•ÏÖò', supportsApi: true },
    { value: Channel.DIRECT_SALE, label: 'üè™ ÏßÅÏ†ëÌåêÎß§', supportsApi: false },
  ];

  useEffect(() => {
    fetchChannelProducts();
    fetchProducts();
  }, []);

  const fetchChannelProducts = async () => {
    try {
      setLoading(true);
      const response = await api.get('/channel-products');
      setChannelProducts(response.data);
    } catch (err) {
      // Î∞±ÏóîÎìúÏóê Ï±ÑÎÑê ÏÉÅÌíà APIÍ∞Ä ÏïÑÏßÅ ÏóÜÎäî Í≤ΩÏö∞(404) Îπà Î™©Î°ùÏúºÎ°ú ÌëúÏãú
      const anyErr: any = err;
      if (anyErr?.response?.status === 404) {
        setChannelProducts([]);
        setError('');
      } else {
        setError('Ï±ÑÎÑê ÏÉÅÌíà Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        console.error('Failed to fetch channel products:', err);
      }
    } finally {
      setLoading(false);
    }
  };

  const fetchProducts = async () => {
    try {
      const response = await productApi.getAll();
      setProducts(response.data);
    } catch (err) {
      console.error('Failed to fetch products:', err);
    }
  };

  const handleOpenDialog = (channel: Channel) => {
    setSelectedChannel(channel);
    setOpenDialog(true);
  };

  const handleRegisterToChannel = async () => {
    if (!selectedProduct || allocatedQuantity <= 0) {
      alert('ÏÉÅÌíàÍ≥º ÏàòÎüâÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    // ÏÑ†ÌÉùÎêú ÏÉÅÌíà Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    const prod = products.find(p => p.id === selectedProduct);
    if (!prod) {
      alert('ÏÑ†ÌÉùÎêú ÏÉÅÌíàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      return;
    }

    // Í∞ÄÍ≤© Í≥ÑÏÇ∞
    const effectivePrice = Number(channelPrice || prod.price || 0);
    if (!Number.isFinite(effectivePrice) || effectivePrice <= 0) {
      alert('Í∞ÄÍ≤©ÏùÑ 0Î≥¥Îã§ ÌÅ∞ Í∞íÏúºÎ°ú ÏûÖÎ†•ÌïòÏÑ∏Ïöî.');
      return;
    }

    // Î≤àÍ∞úÏû•ÌÑ∞Ïùò Í≤ΩÏö∞ ÌäπÎ≥ÑÌïú Ï≤òÎ¶¨
    if (selectedChannel === 'BUNGAE_MARKET') {
      try {
        // 1. Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏ (Îì±Î°ù ÏÑúÎπÑÏä§Î°ú Ìò∏Ï∂ú)
        const statusResponse = await bunjangApi.checkLoginStatus();
        
        if (!statusResponse.data.loggedIn) {
          // 2. Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ - ÏÉÅÌíà Ï†ïÎ≥¥ÏôÄ Ìï®Íªò Î∏åÎùºÏö∞Ï†Ä Ï∞Ω Ïó¥Í∏∞ (Î°úÍ∑∏Ïù∏ ÏôÑÎ£å ÌõÑ ÏûêÎèô ÏÉÅÌíà Îì±Î°ù)
          console.log('Î≤àÍ∞úÏû•ÌÑ∞Ïóê Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÏÉÅÌíà Ï†ïÎ≥¥ÏôÄ Ìï®Íªò Î°úÍ∑∏Ïù∏ÏùÑ ÏãúÏûëÌï©ÎãàÎã§.');
          
          // Î∏åÎùºÏö∞Ï†Ä Ï∞ΩÏùÑ Î®ºÏ†Ä Ïó¥Í∏∞ (API ÏùëÎãµÏùÑ Í∏∞Îã§Î¶¨ÏßÄ ÏïäÏùå)
          // noVNC ÏûêÎèô Ïó∞Í≤∞: autoconnect=true ÌååÎùºÎØ∏ÌÑ∞ Ï∂îÍ∞Ä
          const browserWindow = window.open('http://localhost:7900/?autoconnect=true&resize=scale', '_blank', 'width=1920,height=1080');
          
          if (!browserWindow) {
            alert('Î∏åÎùºÏö∞Ï†Ä ÌåùÏóÖÏù¥ Ï∞®Îã®ÎêòÏóàÏäµÎãàÎã§. ÌåùÏóÖ Ï∞®Îã®ÏùÑ Ìï¥Ï†úÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
            return;
          }
          
          try {
            const response = await bunjangApi.openWithProduct({
              productId: prod.id || 0,
              productName: prod.name,
              description: prod.description || 'ÏÉÅÌíà ÏÑ§Î™ÖÏûÖÎãàÎã§.',
              price: effectivePrice,
              quantity: allocatedQuantity,
              category: prod.category?.name || 'Í∏∞ÌÉÄ'
            });
            
            if (response.data.success) {
              alert('Î≤àÍ∞úÏû•ÌÑ∞ Î∏åÎùºÏö∞Ï†Ä Ï∞ΩÏù¥ Ïó¥Î†∏ÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏ÏùÑ ÏôÑÎ£åÌïòÎ©¥ ÏÉÅÌíàÏù¥ ÏûêÎèôÏúºÎ°ú Îì±Î°ùÎê©ÎãàÎã§.');
              setOpenDialog(false);
              setSelectedProduct(null);
              setAllocatedQuantity(0);
              return;
            } else {
              alert('Î≤àÍ∞úÏû•ÌÑ∞ Î°úÍ∑∏Ïù∏ ÏãúÏûëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ' + response.data.message);
              return;
            }
          } catch (error: any) {
            console.error('Î≤àÍ∞úÏû•ÌÑ∞ Î°úÍ∑∏Ïù∏ ÏãúÏûë Ï§ë Ïò§Î•ò:', error);
            alert('Î≤àÍ∞úÏû•ÌÑ∞ Î°úÍ∑∏Ïù∏ ÏãúÏûë Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + (error?.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'));
            return;
          }
        } else {
          // 3. Î°úÍ∑∏Ïù∏Îêú Í≤ΩÏö∞ ÏÉÅÌíà Îì±Î°ù ÏûêÎèô ÏßÑÌñâ
          console.log('Î≤àÍ∞úÏû•ÌÑ∞Ïóê Î°úÍ∑∏Ïù∏ÎêòÏñ¥ ÏûàÏäµÎãàÎã§. ÏÉÅÌíà Îì±Î°ùÏùÑ ÏûêÎèôÏúºÎ°ú ÏßÑÌñâÌï©ÎãàÎã§.');
          
          try {
            if (!prod.id) {
              throw new Error('ÏÉÅÌíà IDÍ∞Ä ÏóÜÏäµÎãàÎã§.');
            }
            
            const registerResponse = await bunjangApi.registerProduct({
              productId: prod.id,
              productName: prod.name,
              description: prod.description || 'ÏÉÅÌíà ÏÑ§Î™ÖÏûÖÎãàÎã§.',
              price: effectivePrice,
              quantity: allocatedQuantity,
              category: prod.category?.name || 'Í∏∞ÌÉÄ'
            });
            
            if (registerResponse.data.success) {
              alert('Î≤àÍ∞úÏû•ÌÑ∞Ïóê ÏÉÅÌíàÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!');
              setOpenDialog(false);
              setSelectedProduct(null);
              setAllocatedQuantity(0);
              return;
            } else {
              alert('Î≤àÍ∞úÏû•ÌÑ∞ ÏÉÅÌíà Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ' + registerResponse.data.message);
              return;
            }
          } catch (registerError) {
            console.error('Î≤àÍ∞úÏû•ÌÑ∞ ÏÉÅÌíà Îì±Î°ù Ïã§Ìå®:', registerError);
            alert('Î≤àÍ∞úÏû•ÌÑ∞ ÏÉÅÌíà Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
            return;
          }
        }
      } catch (error) {
        console.error('Î≤àÍ∞úÏû•ÌÑ∞ Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error);
        alert('Î≤àÍ∞úÏû•ÌÑ∞ Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
        return;
      }
    }

    // Îã§Î•∏ Ï±ÑÎÑêÏùò Í≤ΩÏö∞ ÏùºÎ∞òÏ†ÅÏù∏ Îì±Î°ù Ï≤òÎ¶¨
    try {
      // ÌîåÎû´Ìèº Îß§Ìïë
      const platformMap: Record<string, string> = {
        CARROT_MARKET: 'danggeun',
        BUNGAE_MARKET: 'bunjang',
        JOONGGONARA: 'junggonara',
        CAFE24: 'cafe24',
        NAVER_STORE: 'naver',
        COUPANG: 'coupang',
        AUCTION: 'auction',
        DIRECT_SALE: 'direct'
      };
      const platform = platformMap[selectedChannel];
      
      const payload = {
        productId: String(selectedProduct),
        productName: prod.name,
        description: prod.description || '',
        price: effectivePrice,
        quantity: allocatedQuantity,
        category: prod.category?.name || '',
        images: prod.imageUrl ? [prod.imageUrl] : []
      };

      await api.post(`/platform/${platform}/register`, payload);

      alert('Ï±ÑÎÑêÏóê ÏÉÅÌíàÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!');
      setOpenDialog(false);
      setSelectedProduct(null);
      setAllocatedQuantity(0);
      setChannelPrice(0);
      fetchChannelProducts();
    } catch (err: any) {
      const errorMsg = err.response?.data?.message || 'Ï±ÑÎÑê Îì±Î°ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      alert(errorMsg);
      console.error('Failed to register to channel:', err);
    }
  };

  const handleDeleteChannelProduct = async (id: number) => {
    if (!window.confirm('Ï†ïÎßê Ïù¥ Ï±ÑÎÑê ÏÉÅÌíàÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) return;

    try {
      await api.delete(`/channel-products/${id}`);
      alert('ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
      fetchChannelProducts();
    } catch (err) {
      alert('ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      console.error('Failed to delete:', err);
    }
  };

  const getStatusColor = (status: ChannelProductStatus) => {
    const colors = {
      [ChannelProductStatus.DRAFT]: 'default',
      [ChannelProductStatus.ACTIVE]: 'success',
      [ChannelProductStatus.OUT_OF_STOCK]: 'error',
      [ChannelProductStatus.PAUSED]: 'warning',
      [ChannelProductStatus.DELETED]: 'default',
      [ChannelProductStatus.SYNC_PENDING]: 'info',
      [ChannelProductStatus.SYNC_FAILED]: 'error',
    };
    return colors[status] || 'default';
  };

  const getStatusLabel = (status: ChannelProductStatus) => {
    const labels = {
      [ChannelProductStatus.DRAFT]: 'ÏûÑÏãúÏ†ÄÏû•',
      [ChannelProductStatus.ACTIVE]: 'ÌåêÎß§Ï§ë',
      [ChannelProductStatus.OUT_OF_STOCK]: 'ÌíàÏ†à',
      [ChannelProductStatus.PAUSED]: 'ÏùºÏãúÏ§ëÏßÄ',
      [ChannelProductStatus.DELETED]: 'ÏÇ≠Ï†úÎê®',
      [ChannelProductStatus.SYNC_PENDING]: 'ÎèôÍ∏∞ÌôîÎåÄÍ∏∞',
      [ChannelProductStatus.SYNC_FAILED]: 'ÎèôÍ∏∞ÌôîÏã§Ìå®',
    };
    return labels[status] || status;
  };

  const getChannelLabel = (channel: Channel) => {
    return channels.find(c => c.value === channel)?.label || channel;
  };

  const filterByChannel = (channel: Channel) => {
    return channelProducts.filter(cp => cp.channel === channel);
  };

  if (loading) {
    return (
      <Container maxWidth="lg" sx={{ mt: 4 }}>
        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
          <CircularProgress />
        </Box>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ mt: 4 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" component="h1" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <StoreIcon fontSize="large" /> Ï±ÑÎÑêÎ≥Ñ ÏÉÅÌíà Í¥ÄÎ¶¨
        </Typography>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}

      {/* Ï±ÑÎÑê ÌÉ≠ */}
      <Paper sx={{ mb: 2 }}>
        <Tabs value={currentTab} onChange={(e, newValue) => setCurrentTab(newValue)} variant="scrollable" scrollButtons="auto">
          {channels.map((channel, index) => (
            <Tab 
              key={channel.value} 
              label={
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  {channel.label}
                  <Chip 
                    label={filterByChannel(channel.value).length} 
                    size="small" 
                    color="primary"
                  />
                </Box>
              }
            />
          ))}
        </Tabs>
      </Paper>

      {/* Í∞Å Ï±ÑÎÑêÎ≥Ñ ÌÉ≠ Ìå®ÎÑê */}
      {channels.map((channel, index) => (
        <TabPanel key={channel.value} value={currentTab} index={index}>
          <Box sx={{ mb: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="h6">{channel.label} Îì±Î°ù ÏÉÅÌíà</Typography>
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={() => handleOpenDialog(channel.value)}
            >
              ÏÉÅÌíà Îì±Î°ù
            </Button>
          </Box>

          {channel.supportsApi && (
            <Alert severity="info" sx={{ mb: 2 }}>
              Ïù¥ Ï±ÑÎÑêÏùÄ API ÏûêÎèô ÎèôÍ∏∞ÌôîÎ•º ÏßÄÏõêÌï©ÎãàÎã§. (4Îã®Í≥ÑÏóêÏÑú Íµ¨ÌòÑ ÏòàÏ†ï)
            </Alert>
          )}

          <TableContainer component={Paper}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>ÏÉÅÌíàÎ™Ö</TableCell>
                  <TableCell>SKU</TableCell>
                  <TableCell>OEMÎ≤àÌò∏</TableCell>
                  <TableCell>Ï±ÑÎÑê Í∞ÄÍ≤©</TableCell>
                  <TableCell>Ìï†Îãπ Ïû¨Í≥†</TableCell>
                  <TableCell>ÌåêÎß§Îê®</TableCell>
                  <TableCell>ÎÇ®ÏùÄ Ïû¨Í≥†</TableCell>
                  <TableCell>ÏÉÅÌÉú</TableCell>
                  <TableCell>ÏûëÏóÖ</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filterByChannel(channel.value).length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={9} align="center">
                      <Typography color="textSecondary">
                        Îì±Î°ùÎêú ÏÉÅÌíàÏù¥ ÏóÜÏäµÎãàÎã§.
                      </Typography>
                    </TableCell>
                  </TableRow>
                ) : (
                  filterByChannel(channel.value).map((cp) => (
                    <TableRow key={cp.id} hover>
                      <TableCell>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          {cp.productImageUrl && (
                            <Box
                              component="img"
                              src={cp.productImageUrl}
                              alt={cp.productImageAltText || cp.productName}
                              sx={{
                                width: 40,
                                height: 40,
                                objectFit: 'cover',
                                borderRadius: 1,
                                border: '1px solid #e0e0e0'
                              }}
                            />
                          )}
                          <Typography variant="body2" fontWeight="bold">
                            {cp.productName}
                          </Typography>
                        </Box>
                      </TableCell>
                      <TableCell>{cp.productSku}</TableCell>
                      <TableCell>{cp.productOemNumber || '-'}</TableCell>
                      <TableCell>{cp.channelPrice?.toLocaleString()}Ïõê</TableCell>
                      <TableCell>{cp.allocatedQuantity}</TableCell>
                      <TableCell>{cp.soldQuantity}</TableCell>
                      <TableCell>
                        <Typography 
                          variant="body2" 
                          fontWeight="bold"
                          color={cp.availableQuantity! <= 0 ? 'error' : 'success.main'}
                        >
                          {cp.availableQuantity}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Chip 
                          label={getStatusLabel(cp.status)} 
                          size="small" 
                          color={getStatusColor(cp.status) as any}
                        />
                      </TableCell>
                      <TableCell>
                        <IconButton size="small" color="error" onClick={() => handleDeleteChannelProduct(cp.id!)}>
                          <DeleteIcon />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </TableContainer>
        </TabPanel>
      ))}

      {/* ÏÉÅÌíà Îì±Î°ù Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>
          {getChannelLabel(selectedChannel)}Ïóê ÏÉÅÌíà Îì±Î°ù
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <TextField
                select
                fullWidth
                label="ÏÉÅÌíà ÏÑ†ÌÉù"
                value={selectedProduct || ''}
                onChange={(e) => setSelectedProduct(Number(e.target.value))}
              >
                <MenuItem value="">ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</MenuItem>
                {products.map((product) => (
                  <MenuItem key={product.id} value={product.id}>
                    {product.name} (SKU: {product.sku})
                  </MenuItem>
                ))}
              </TextField>
            </Grid>
            
            {/* ÏÑ†ÌÉùÎêú ÏÉÅÌíà Ï†ïÎ≥¥ ÌëúÏãú */}
            {selectedProduct && (
              <Grid item xs={12}>
                <Box sx={{ p: 2, border: '1px solid #e0e0e0', borderRadius: 1, bgcolor: '#f5f5f5' }}>
                  <Typography variant="subtitle2" gutterBottom>
                    ÏÑ†ÌÉùÎêú ÏÉÅÌíà Ï†ïÎ≥¥
                  </Typography>
                  {(() => {
                    const product = products.find(p => p.id === selectedProduct);
                    return product ? (
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                        {product.imageUrl && (
                          <Box
                            component="img"
                            src={product.imageUrl}
                            alt={product.imageAltText || product.name}
                            sx={{
                              width: 60,
                              height: 60,
                              objectFit: 'cover',
                              borderRadius: 1,
                              border: '1px solid #e0e0e0'
                            }}
                          />
                        )}
                        <Box>
                          <Typography variant="body1" fontWeight="bold">
                            {product.name}
                          </Typography>
                          <Typography variant="body2" color="textSecondary">
                            SKU: {product.sku} | Í∞ÄÍ≤©: {product.price?.toLocaleString()}Ïõê
                          </Typography>
                          {product.description && (
                            <Typography variant="body2" color="textSecondary" sx={{ mt: 0.5 }}>
                              {product.description}
                            </Typography>
                          )}
                        </Box>
                      </Box>
                    ) : null;
                  })()}
                </Box>
              </Grid>
            )}
            <Grid item xs={12}>
              <TextField
                fullWidth
                type="number"
                label="Ìï†Îãπ Ïû¨Í≥† ÏàòÎüâ"
                value={allocatedQuantity}
                onChange={(e) => setAllocatedQuantity(Number(e.target.value))}
                helperText="Ïù¥ Ï±ÑÎÑêÏóê ÌåêÎß§Ìï† ÏàòÎüâÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                InputProps={{ inputProps: { min: 0 } }}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                type="number"
                label="Ï±ÑÎÑê ÌåêÎß§Í∞Ä (ÏÑ†ÌÉùÏÇ¨Ìï≠)"
                value={channelPrice}
                onChange={(e) => setChannelPrice(Number(e.target.value))}
                helperText="ÎπÑÏõåÎëêÎ©¥ Í∏∞Î≥∏ Í∞ÄÍ≤© ÏÇ¨Ïö©"
                InputProps={{ inputProps: { min: 0 } }}
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)}>Ï∑®ÏÜå</Button>
          <Button variant="contained" onClick={handleRegisterToChannel}>
            Îì±Î°ù
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
};

export default ChannelProductManagement;

